generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Board {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  description String?
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  classes     Class[]
  subjects    Subject[]
  
  @@map("boards")
}

model Class {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  type      ClassType
  boardId   String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  subjects  Subject[]
  chapters  Chapter[]
  
  @@map("classes")
}

model Subject {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  description String?
  imageUrl    String?
  boardId     String   @db.ObjectId
  classId     String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  class       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  chapters    Chapter[]
  
  @@map("subjects")
}

model Chapter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String   @unique
  pdfUrl    String
  chapterNumber    Int
  classId   String   @db.ObjectId
  subjectId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  
  @@map("chapters")
  MCQQuestions MCQQuestion[]
  ShortQuestions ShortQuestion[]
  LongQuestions LongQuestion[]
}

model MCQQuestion {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  options       String[]     // Array of 4 options
  correctAnswer Int          // Index of correct option (0-3)
  difficulty    Difficulty   @default(MEDIUM)
  
  // Hierarchical reference
  chapterId     String       @db.ObjectId
  
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  chapter       Chapter      @relation(fields: [chapterId], references: [id])
  
  @@index([chapterId])
  @@map("mcq_questions")
}

model ShortQuestion {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  answer        String?
  difficulty    Difficulty   @default(MEDIUM)
  
  // Hierarchical reference
  chapterId     String       @db.ObjectId
  
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relation
  chapter       Chapter      @relation(fields: [chapterId], references: [id])
  
  @@index([chapterId])
  @@map("short_questions")
}

model LongQuestion {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  questionType  QuestionType @default(DEFAULT)
  question      String
  answer        String?
  difficulty    Difficulty   @default(MEDIUM)
  
  // Hierarchical reference
  chapterId     String       @db.ObjectId
  
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relation
  chapter       Chapter      @relation(fields: [chapterId], references: [id])
  
  @@index([chapterId])
  @@map("long_questions")
}

enum ClassType {
  PRIMARY
  SECONDARY
  HIGHER_SECONDARY
  INTERMEDIATE
}

// Enums
enum QuestionType {
  DEFAULT
  ESSAY
  OTHER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}